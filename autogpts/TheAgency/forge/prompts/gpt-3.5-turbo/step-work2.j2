Task: {{ task }}

Plan: {{ plan }}

Constraints:

Double-check work before finishing.
Use 'csv' abilities for CSV files.
Avoid search_in_file for CSV files.
Keep messages short and concise.
Complete tasks using fewest possible steps.
Analyze data before finishing.
Prioritize local data sources.
Conclude tasks with finish.
Maintain data precision.
Assume local files are in the same folder as the source code.
Follow provided notation for values or text in task instructions.
Efficiently utilize discovered files to complete each step.
Before using 'run_python_file', ensure the relevant file exists or create it if needed.
Consult online documentation if you're unfamiliar with a programming library.
When handling steps, consider all available data files (.csv, .txt, etc.), possibly combining multiple files for comprehensive solutions.
Assess the necessity of each file; include only essential files in your task.
Initial steps are designed for one file; create additional steps for multiple files.
Ensure processing of other files before completing all task steps.
Use 'list_files' to discover files, but remember to load them into memory using the 'read_file_from_memory' ability.
Set "ability" to "None" if you are not using any ability in a step.

Best Practices:

Look for words like 'for example' or 'for instance' in a task description to understand the output the task is asking for. Sometimes specific formats of numbers or text are needed to fully complete the task. Follow the examples.
List file should mostly list files at "." or "./" unless defined otherwise in the task instructions.
Always load a file into memory via 'add_file_memory' before calling 'read_file_from_memory.'
Always use the filenames specified in the task, if provided.
Utilize 'read_file_from_memory' to read files up to 50 characters. Greater than 50 characters use 'mem_qna' ability.
Make coherent steps toward completing the task. Avoid repetition.
Make sure to read files with 'read_file_from_memory' to utilize the information.
Utilize the 'list_files' ability to check for data files.
If you run into an error, reprocess the steps, adding and removing steps needed to avoid error, and reprocess steps.
There is no analysis ability and analysis of data will be done by you with your inherit abilities as an LLM. Remember to use your inherit strength and don't depend always on an ability.
If a file is not found in 'read_file_from_memory,' just adding the file with 'add_file_memory' and then reading it again with 'read_file_from_memory.'
If the required column in a CSV is not present, create the column with 'csv_add_column_data,' starting at the 0th row.
If adding columns to a CSV, read the CSV first and analyze the structure and data before adding values with 'csv_add_column_data.'
To categorize a CSV, read over each row in a column with 'csv_get_column_value,' analyze the data, and add the categorization to the proper column and row with 'csv_add_column_data.'
Before using 'csv_merge,' use 'csv_get_columns' on both files to find the common column. Do not use 'csv_merge' with one file. Only use it with two different files or more.
Abilities that start with 'csv' are ONLY for CSV files; do not use them for anything else.
When searching for usernames online, remember that some start with @ to link or reference a username.
Double-check the spelling and case of a username by going to its source.
If looking into a company, find clarifying information about the company first before digging in.
When there is more than one CSV file, try to see if you can merge them as they might contain needed data. 

Examples:
- Two CSV files one named file1.csv and the other file2.csv
    * Check and note the column present that is the same on both
        > csv_get_same_columns("file1.csv", "file2.csv") -> ["ID"]
    * Merge on matching column
        > csv_merge("output.csv", "file1.csv", "file2.csv", "ID")